import { AproReportParser } from '@/parser/apro-report-parser'
import { describe, expect, it } from 'vitest'

describe('apro Report Parser', () => {
  it('should parse a report', () => {
    // Given
    const aproReportParser = new AproReportParser()
    const hexData = '0x00067f925361b2ab26a59cc1997a5c064b3eeb4c9c39262caaf616b42d1ad1320000000000000000000000000000000000000000000000000000000002742b13000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200003665949c883f9e0f6f002eac32e00bd59dfe6c34e92a91c37d6a8322d64890000000000000000000000000000000000000000000000000000000067641f330000000000000000000000000000000000000000000000000000000067641f330000000000000000000000000000000000000000000000000000031dfaf4d61400000000000000000000000000000000000000000000000004db73254763000000000000000000000000000000000000000000000000000000000000676570b30000000000000000000000000000000000000000000015a000af88436291800000000000000000000000000000000000000000000000159ffede207510fe00000000000000000000000000000000000000000000000015a00601a488297400000000000000000000000000000000000000000000000000000000000000000002c8a690222d41257985869083494cac7642192d549c48a7ea58d27a9feb45d7f3c0b1a372ffbace48bf51bdb3d2a6d8f9d56843de5fd027baf4858441c3258131000000000000000000000000000000000000000000000000000000000000000246e9a441319be6fa824a79686d6435358c62faacfe8feb1dbae83b549a3c11f501e01b4583dbeab57f517dea101b2bdbafa9690e66953fbcc6a8f648c1366a63'

    // When
    const report = aproReportParser.parse(hexData)

    // Then
    expect(report).toEqual({
      reportContext: [
        '0x00067f925361b2ab26a59cc1997a5c064b3eeb4c9c39262caaf616b42d1ad132',
        '0x0000000000000000000000000000000000000000000000000000000002742b13',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
      ],
      report: {
        feedId: '0x0003665949c883f9e0f6f002eac32e00bd59dfe6c34e92a91c37d6a8322d6489',
        validTimeStamp: 1734614835n,
        observeTimeStamp: 1734614835n,
        nativeFee: 3427299284500n,
        tokenFee: 350000000000000000n,
        expireTimeStamp: 1734701235n,
        midPrice: '102121.2246',
        askPrice: '102121.0936',
        bidPrice: '102121.608',
      },
      rawRs: [
        '0xc8a690222d41257985869083494cac7642192d549c48a7ea58d27a9feb45d7f3',
        '0xc0b1a372ffbace48bf51bdb3d2a6d8f9d56843de5fd027baf4858441c3258131',
      ],
      rawSs: [
        '0x46e9a441319be6fa824a79686d6435358c62faacfe8feb1dbae83b549a3c11f5',
        '0x01e01b4583dbeab57f517dea101b2bdbafa9690e66953fbcc6a8f648c1366a63',
      ],
      rawVs: '0x0001000000000000000000000000000000000000000000000000000000000000',
    })
  })
})
